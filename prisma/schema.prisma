datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider      = "prisma-client-js"
binaryTargets = ["native", "darwin-arm64"]
  output        = "../node_modules/.prisma/client"
 
}

model Clinic {
    id        Int       @id @default(autoincrement())
    title     String
    categories Category[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Category {
    id        Int       @id @default(autoincrement())
    type      String
    slugCategory      String
    pets      Pet[]
    petID     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Clinic     Clinic   @relation(fields: [clinicId], references: [id])
    clinicId Int

    
}

model Pet {
  id        Int       @id @default(autoincrement())
  petName   String
  slugPet      String
  petAge    Int
  breed     String
  birth     String
  gender    String
  uploadURL String?
  owner     Owner[]
  primaryVax PrimaryVax[]
  annualVax AnnualVax[]
  medicalHx  MedicalHx[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Category  Category  @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId  Int

  
}

model Owner {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  ownerAge  Int
  contact   Int
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Pet       Pet       @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId     Int

  
}

model PrimaryVax {
  id        Int       @id @default(autoincrement()) @unique
  age       Int?
  date      String
  weight    Int?
  description String
  followUp   String
  veterinarian String
  remarks     Boolean  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Pet       Pet       @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId     Int

  @@unique([petId, id])
}

model AnnualVax {
  id        Int       @id @default(autoincrement())
  age       Int?
  date      String
  weight    Int?
  description String
  followUp   String
  veterinarian String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Pet       Pet       @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId     Int

  @@unique([petId, id])
}

model MedicalHx {
  id        Int       @id @default(autoincrement())
  age       Int?
  date      String
  weight    Int?
  description String
  followUp   String
  veterinarian String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Pet       Pet       @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId     Int

  @@unique([petId, id])
}
